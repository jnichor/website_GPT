Traceback (most recent call last):
  File "C:\PYTHON\Python39\lib\site-packages\jupyter_cache\executors\utils.py", line 58, in single_nb_execution
    executenb(
  File "C:\PYTHON\Python39\lib\site-packages\nbclient\client.py", line 1314, in execute
    return NotebookClient(nb=nb, resources=resources, km=km, **kwargs).execute()
  File "C:\Users\ronco\AppData\Roaming\Python\Python39\site-packages\jupyter_core\utils\__init__.py", line 166, in wrapped
    return loop.run_until_complete(inner)
  File "C:\PYTHON\Python39\lib\asyncio\base_events.py", line 647, in run_until_complete
    return future.result()
  File "C:\PYTHON\Python39\lib\site-packages\nbclient\client.py", line 709, in async_execute
    await self.async_execute_cell(
  File "C:\PYTHON\Python39\lib\site-packages\nbclient\client.py", line 1062, in async_execute_cell
    await self._check_raise_for_error(cell, cell_index, exec_reply)
  File "C:\PYTHON\Python39\lib\site-packages\nbclient\client.py", line 918, in _check_raise_for_error
    raise CellExecutionError.from_cell_and_msg(cell, exec_reply_content)
nbclient.exceptions.CellExecutionError: An error occurred while executing the following cell:
------------------
import geopandas as gpd
import pandas as pd
import rasterio as rio
from rasterio import mask
import numpy as np
import shapely as shp
import folium
import branca.colormap as bcm
from matplotlib import colors as colors
from branca.element import MacroElement
from jinja2 import Template

class BindColormap(MacroElement):
    """Binds a colormap to a given layer.

    Parameters
    ----------
    colormap : branca.colormap.ColorMap
        The colormap to bind.
    """
    def __init__(self, layer, colormap):
        super(BindColormap, self).__init__()
        self.layer = layer
        self.colormap = colormap
        self._template = Template(u"""
        {% macro script(this, kwargs) %}
            {{this.colormap.get_name()}}.svg[0][0].style.display = 'block';
            {{this._parent.get_name()}}.on('overlayadd', function (eventLayer) {
                if (eventLayer.layer == {{this.layer.get_name()}}) {
                    {{this.colormap.get_name()}}.svg[0][0].style.display = 'block';
                }});
            {{this._parent.get_name()}}.on('overlayremove', function (eventLayer) {
                if (eventLayer.layer == {{this.layer.get_name()}}) {
                    {{this.colormap.get_name()}}.svg[0][0].style.display = 'none';
                }});
        {% endmacro %}
        """)

def define_cmap(image, name):
    processed_image = image[~np.isnan(image)]
    color_map = bcm.StepColormap(
        colors = bcm.linear.viridis.colors,
        vmin = processed_image.min(),
        vmax = processed_image.max(),
        caption = name
    )
    return color_map

def mapvalue2color(value, cmap): 
    """
    Map a pixel value of image to a color in the rgba format. 
    As a special case, nans will be mapped totally transparent.
    
    Inputs
        -- value - pixel value of image, could be np.nan
        -- cmap - a linear colormap from branca.colormap.linear
    Output
        -- a color value in the rgba format (r, g, b, a)    
    """
    if np.isnan(value):
        return (1, 0, 0, 0)
    else:
        return colors.to_rgba(cmap(value), 0.7)

lka_admin0_shpfile_path = "_data/raw/lka_adm/lka_admbnda_adm0_slsd_20220816.shp"
lka_pop_density_path = "_data/raw/lka_pd_2020_1km.tif"
bgd_admin0_shpfile_path = "_data/raw/bgd_adm/bgd_admbnda_adm0_bbs_20201113.shp"
bgd_pop_density_path = "_data/raw/bgd_pd_2020_1km.tif"
ind_admin0_shpfile_path = "_data/raw/ind_adm/adm0.shp"
ind_pop_density_path = "_data/raw/ind_pd_2020_1km.tif"

lka_admin_raw = gpd.read_file(lka_admin0_shpfile_path)
lka_density_raw = rio.open(lka_pop_density_path)
lka_bounding_box = lka_density_raw.bounds
lka_bounds = [[lka_bounding_box.bottom, lka_bounding_box.left], [lka_bounding_box.top, lka_bounding_box.right]]
lka_image, lka_transform = mask.mask(lka_density_raw, list(lka_admin_raw["geometry"][0].geoms), nodata = np.nan)
lka_image = lka_image[0]

bgd_admin_raw = gpd.read_file(bgd_admin0_shpfile_path)
bgd_density_raw = rio.open(bgd_pop_density_path)
bgd_bounding_box = bgd_density_raw.bounds
bgd_bounds = [[bgd_bounding_box.bottom, bgd_bounding_box.left], [bgd_bounding_box.top, bgd_bounding_box.right]]
bgd_image, bgd_transform = mask.mask(bgd_density_raw, list(bgd_admin_raw["geometry"][0].geoms), nodata = np.nan)
bgd_image = bgd_image[0]

ind_admin_raw = gpd.read_file(ind_admin0_shpfile_path)
ind_density_raw = rio.open(ind_pop_density_path)
ind_bounding_box = ind_density_raw.bounds
ind_bounds = [[ind_bounding_box.bottom, ind_bounding_box.left], [ind_bounding_box.top, ind_bounding_box.right]]
ind_image, ind_transform = mask.mask(ind_density_raw, list(ind_admin_raw["geometry"][0].geoms), nodata = np.nan)
ind_image = ind_image[0]

all_shape = pd.concat((ind_admin_raw, bgd_admin_raw, lka_admin_raw))
all_shape["all"] = 1
all_shape = all_shape[["all", "geometry"]].dissolve(by = "all").reset_index()
centroid_lon, centroid_lat = all_shape.centroid[0].coords.xy
centroid_lon, centroid_lat = centroid_lon[0], centroid_lat[0]

colormaps = []

for image, title in zip([lka_image, bgd_image, ind_image], ["Sri Lanka", "Bangladesh", "India"]):
    colormaps += [define_cmap(np.log10(image, out=np.zeros_like(image, dtype=np.float64), where=(image!=0)), "Log-Population Density per Square Km - " + title)]

m = folium.Map(location=(centroid_lat, centroid_lon), zoom_start = 5)

for image, title, bounds, cmap in zip([lka_image, bgd_image, ind_image], ["Sri Lanka", "Bangladesh", "India"], [lka_bounds, bgd_bounds, ind_bounds], colormaps):
    overlay = folium.raster_layers.ImageOverlay(np.log10(image, out=np.zeros_like(image, dtype=np.float64), where=(image!=0)), opacity = .5, bounds = bounds, colormap = lambda x: mapvalue2color(x, cmap), name = title, mercator_project=True)
    
    for child in overlay._children:
        if child.startswith("color_map"):
            del overlay._children[child]
    
    m.add_child(cmap)
    m.add_child(overlay)
    overlay_bind = BindColormap(overlay, cmap)
    m.add_child(overlay_bind)

m.add_child(folium.LayerControl())
m
------------------


[1;31m----------------------------------------------[0m
[1;31mModuleNotFoundError[0mTraceback (most recent call last)
Cell [1;32mIn[1], line 3[0m
[0;32m      1[0m [38;5;28;01mimport[39;00m [38;5;21;01mgeopandas[39;00m [38;5;28;01mas[39;00m [38;5;21;01mgpd[39;00m
[0;32m      2[0m [38;5;28;01mimport[39;00m [38;5;21;01mpandas[39;00m [38;5;28;01mas[39;00m [38;5;21;01mpd[39;00m
[1;32m----> 3[0m [38;5;28;01mimport[39;00m [38;5;21;01mrasterio[39;00m [38;5;28;01mas[39;00m [38;5;21;01mrio[39;00m
[0;32m      4[0m [38;5;28;01mfrom[39;00m [38;5;21;01mrasterio[39;00m [38;5;28;01mimport[39;00m mask
[0;32m      5[0m [38;5;28;01mimport[39;00m [38;5;21;01mnumpy[39;00m [38;5;28;01mas[39;00m [38;5;21;01mnp[39;00m

[1;31mModuleNotFoundError[0m: No module named 'rasterio'

